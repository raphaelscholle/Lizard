From dfc6c6fc6fefee996e838e04e238ad384a2a1274 Mon Sep 17 00:00:00 2001
From: anruliu <anruliu@allwinnertech.com>
Date: Fri, 5 Mar 2021 18:43:58 +0800
Subject: [PATCH] update the g2d header file

Signed-off-by: anruliu <anruliu@allwinnertech.com>
---
 src/include/g2d_driver.h     | 352 ++++++-----------------------------
 src/include/g2d_driver_enh.h |  85 ++++++---
 src/newgal/fbcon/fbvideo.c   | 182 +-----------------
 src/newgal/fbcon/fbvideo.h   |  27 +--
 4 files changed, 120 insertions(+), 526 deletions(-)

diff --git a/src/include/g2d_driver.h b/src/include/g2d_driver.h
index ed40662..962297f 100644
--- a/src/include/g2d_driver.h
+++ b/src/include/g2d_driver.h
@@ -14,71 +14,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
  * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
  */
 
 #ifndef __G2D_DRIVER_H
 #define __G2D_DRIVER_H
 
-#include <linux/types.h>
-#include <linux/ioctl.h>
-#include <stdbool.h>
+#ifndef __G2D_BSP_DRV_H
+#define __G2D_BSP_DRV_H
 
-/* data format */
-typedef enum {
-	G2D_FORMAT_ARGB8888,
-	G2D_FORMAT_ABGR8888,
-	G2D_FORMAT_RGBA8888,
-	G2D_FORMAT_BGRA8888,
-	G2D_FORMAT_XRGB8888,
-	G2D_FORMAT_XBGR8888,
-	G2D_FORMAT_RGBX8888,
-	G2D_FORMAT_BGRX8888,
-	G2D_FORMAT_RGB888,
-	G2D_FORMAT_BGR888,
-	G2D_FORMAT_RGB565,
-	G2D_FORMAT_BGR565,
-	G2D_FORMAT_ARGB4444,
-	G2D_FORMAT_ABGR4444,
-	G2D_FORMAT_RGBA4444,
-	G2D_FORMAT_BGRA4444,
-	G2D_FORMAT_ARGB1555,
-	G2D_FORMAT_ABGR1555,
-	G2D_FORMAT_RGBA5551,
-	G2D_FORMAT_BGRA5551,
-	G2D_FORMAT_ARGB2101010,
-	G2D_FORMAT_ABGR2101010,
-	G2D_FORMAT_RGBA1010102,
-	G2D_FORMAT_BGRA1010102,
-
-	/* invailed for UI channel */
-	G2D_FORMAT_IYUV422_V0Y1U0Y0 = 0x20,
-	G2D_FORMAT_IYUV422_Y1V0Y0U0,
-	G2D_FORMAT_IYUV422_U0Y1V0Y0,
-	G2D_FORMAT_IYUV422_Y1U0Y0V0,
-
-	G2D_FORMAT_YUV422UVC_V1U1V0U0,
-	G2D_FORMAT_YUV422UVC_U1V1U0V0,
-	G2D_FORMAT_YUV422_PLANAR,
-
-	G2D_FORMAT_YUV420UVC_V1U1V0U0 = 0x28,
-	G2D_FORMAT_YUV420UVC_U1V1U0V0,
-	G2D_FORMAT_YUV420_PLANAR,
-
-	G2D_FORMAT_YUV411UVC_V1U1V0U0 = 0x2c,
-	G2D_FORMAT_YUV411UVC_U1V1U0V0,
-	G2D_FORMAT_YUV411_PLANAR,
-
-	G2D_FORMAT_Y8 = 0x30,
-
-	/* YUV 10bit format */
-	G2D_FORMAT_YVU10_P010 = 0x34,
-
-	G2D_FORMAT_YVU10_P210 = 0x36,
-
-	G2D_FORMAT_YVU10_444 = 0x38,
-	G2D_FORMAT_YUV10_444 = 0x39,
-	G2D_FORMAT_MAX,
-} g2d_fmt_enh;
 /* mixer data format */
 typedef enum {
 	/* share data format */
@@ -147,110 +94,39 @@ typedef enum {
 	G2D_SEQ_NORMAL = 0x0,
 
 	/* for interleaved yuv422 */
-	G2D_SEQ_VYUY   = 0x1,			/* pixel 0�ڵ�16λ */
-	G2D_SEQ_YVYU   = 0x2,			/* pixel 1�ڵ�16λ */
+    G2D_SEQ_VYUY   = 0x1,				/* pixel 0�ڵ�16λ */
+    G2D_SEQ_YVYU   = 0x2,				/* pixel 1�ڵ�16λ */
 
 	/* for uv_combined yuv420 */
-	G2D_SEQ_VUVU   = 0x3,
+    G2D_SEQ_VUVU   = 0x3,
 
 	/* for 16bpp rgb */
-	G2D_SEQ_P10    = 0x4,			/* pixel 0�ڵ�16λ */
-	G2D_SEQ_P01    = 0x5,			/* pixel 1�ڵ�16λ */
+    G2D_SEQ_P10    = 0x4,				/* pixel 0�ڵ�16λ */
+    G2D_SEQ_P01    = 0x5,				/* pixel 1�ڵ�16λ */
 
 	/* planar format or 8bpp rgb */
-	G2D_SEQ_P3210  = 0x6,			/* pixel 0�ڵ�8λ */
-	G2D_SEQ_P0123  = 0x7,			/* pixel 3�ڵ�8λ */
+    G2D_SEQ_P3210  = 0x6,				/* pixel 0�ڵ�8λ */
+    G2D_SEQ_P0123  = 0x7,				/* pixel 3�ڵ�8λ */
 
 	/* for 4bpp rgb */
-	G2D_SEQ_P76543210  = 0x8,			/* 7,6,5,4,3,2,1,0 */
-	G2D_SEQ_P67452301  = 0x9,			/* 6,7,4,5,2,3,0,1 */
-	G2D_SEQ_P10325476  = 0xA,			/* 1,0,3,2,5,4,7,6 */
-	G2D_SEQ_P01234567  = 0xB,			/* 0,1,2,3,4,5,6,7 */
+    G2D_SEQ_P76543210  = 0x8,			/* 7,6,5,4,3,2,1,0 */
+    G2D_SEQ_P67452301  = 0x9,			/* 6,7,4,5,2,3,0,1 */
+    G2D_SEQ_P10325476  = 0xA,			/* 1,0,3,2,5,4,7,6 */
+    G2D_SEQ_P01234567  = 0xB,			/* 0,1,2,3,4,5,6,7 */
 
 	/* for 2bpp rgb */
-	/* 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
-	G2D_SEQ_2BPP_BIG_BIG       = 0xC,
-	/* 12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3 */
-	G2D_SEQ_2BPP_BIG_LITTER    = 0xD,
-	/* 3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12 */
-	G2D_SEQ_2BPP_LITTER_BIG    = 0xE,
-	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 */
-	G2D_SEQ_2BPP_LITTER_LITTER = 0xF,
+    G2D_SEQ_2BPP_BIG_BIG       = 0xC,	/* 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_2BPP_BIG_LITTER    = 0xD,	/* 12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3 */
+    G2D_SEQ_2BPP_LITTER_BIG    = 0xE,	/* 3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12 */
+    G2D_SEQ_2BPP_LITTER_LITTER = 0xF,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 */
 
 	/* for 1bpp rgb */
-	/* 31,30,29,28,27,26,25,24,23,22,21,20,
-	 * 19,18,17,16,15,14,13,12,11,10,9,8,7,
-	 * 6,5,4,3,2,1,0
-	 */
-	G2D_SEQ_1BPP_BIG_BIG       = 0x10,
-	/* 24,25,26,27,28,29,30,31,16,17,
-	 * 18,19,20,21,22,23,8,9,10,11,12,
-	 * 13,14,15,0,1,2,3,4,5,6,7
-	 */
-	G2D_SEQ_1BPP_BIG_LITTER    = 0x11,
-	/* 7,6,5,4,3,2,1,0,15,14,13,12,11,
-	 * 10,9,8,23,22,21,20,19,18,17,16,
-	 * 31,30,29,28,27,26,25,24
-	 */
-	G2D_SEQ_1BPP_LITTER_BIG    = 0x12,
-	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,
-	 * 14,15,16,17,18,19,20,21,22,23,24,
-	 * 25,26,27,28,29,30,31
-	 */
-	G2D_SEQ_1BPP_LITTER_LITTER = 0x13,
+    G2D_SEQ_1BPP_BIG_BIG       = 0x10,	/* 31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 */
+    G2D_SEQ_1BPP_BIG_LITTER    = 0x11,	/* 24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7 */
+    G2D_SEQ_1BPP_LITTER_BIG    = 0x12,	/* 7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24 */
+    G2D_SEQ_1BPP_LITTER_LITTER = 0x13,	/* 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 */
 } g2d_pixel_seq;
 
-/*  */
-typedef enum {
-	G2D_BLT_NONE_H = 0x0,
-	G2D_BLT_BLACKNESS,
-	G2D_BLT_NOTMERGEPEN,
-	G2D_BLT_MASKNOTPEN,
-	G2D_BLT_NOTCOPYPEN,
-	G2D_BLT_MASKPENNOT,
-	G2D_BLT_NOT,
-	G2D_BLT_XORPEN,
-	G2D_BLT_NOTMASKPEN,
-	G2D_BLT_MASKPEN,
-	G2D_BLT_NOTXORPEN,
-	G2D_BLT_NOP,
-	G2D_BLT_MERGENOTPEN,
-	G2D_BLT_COPYPEN,
-	G2D_BLT_MERGEPENNOT,
-	G2D_BLT_MERGEPEN,
-	G2D_BLT_WHITENESS = 0x000000ff,
-
-	G2D_ROT_90  = 0x00000100,
-	G2D_ROT_180 = 0x00000200,
-	G2D_ROT_270 = 0x00000300,
-	G2D_ROT_0   = 0x00000400,
-	G2D_ROT_H = 0x00001000,
-	G2D_ROT_V = 0x00002000,
-
-/*	G2D_SM_TDLR_1  =    0x10000000, */
-	G2D_SM_DTLR_1 = 0x10000000,
-/*	G2D_SM_TDRL_1  =    0x20000000, */
-/*	G2D_SM_DTRL_1  =    0x30000000, */
-} g2d_blt_flags_h;
-
-/* ROP3 command */
-typedef enum {
-	G2D_ROP3_BLACKNESS = 0x00,
-	G2D_ROP3_NOTSRCERASE = 0x11,
-	G2D_ROP3_NOTSRCCOPY = 0x33,
-	G2D_ROP3_SRCERASE = 0x44,
-	G2D_ROP3_DSTINVERT = 0x55,
-	G2D_ROP3_PATINVERT = 0x5A,
-	G2D_ROP3_SRCINVERT = 0x66,
-	G2D_ROP3_SRCAND = 0x88,
-	G2D_ROP3_MERGEPAINT = 0xBB,
-	G2D_ROP3_MERGECOPY = 0xC0,
-	G2D_ROP3_SRCCOPY = 0xCC,
-	G2D_ROP3_SRCPAINT = 0xEE,
-	G2D_ROP3_PATCOPY = 0xF0,
-	G2D_ROP3_PATPAINT = 0xFB,
-	G2D_ROP3_WHITENESS = 0xFF,
-} g2d_rop3_cmd_flag;
 
 typedef enum {
 	G2D_FIL_NONE			= 0x00000000,
@@ -277,58 +153,23 @@ typedef enum {
 	G2D_BLT_DST_PREMULTIPLY	= 0x00002000,
 } g2d_blt_flags;
 
-/* BLD LAYER ALPHA MODE*/
-typedef enum {
-	G2D_PIXEL_ALPHA,
-	G2D_GLOBAL_ALPHA,
-	G2D_MIXER_ALPHA,
-} g2d_alpha_mode_enh;
-
 /* flip rectangle struct */
 typedef struct {
-	__s32		x;		/* left top point coordinate x */
-	__s32		y;		/* left top point coordinate y */
-	__u32		w;		/* rectangle width */
-	__u32		h;		/* rectangle height */
+	__s32		x;			/* left top point coordinate x */
+	__s32		y;			/* left top point coordinate y */
+	__u32		w;			/* rectangle width */
+	__u32		h;			/* rectangle height */
 } g2d_rect;
 
-/* g2d color gamut */
-typedef enum {
-	G2D_BT601,
-	G2D_BT709,
-	G2D_BT2020,
-} g2d_color_gmt;
-
 /* image struct */
 typedef struct {
-	__u32		addr[3];/* base addr of image frame buffer in byte */
-	__u32		w;	/* width of image frame buffer in pixel */
-	__u32		h;	/* height of image frame buffer in pixel */
-	g2d_data_fmt	format;	/* pixel format of image frame buffer */
-	g2d_pixel_seq	pixel_seq;/* pixel sequence of image frame buffer */
+	__u32			 addr[3];		/* base addr of image frame buffer in byte */
+	__u32			 w;			/* width of image frame buffer in pixel */
+	__u32			 h;			/* height of image frame buffer in pixel */
+	g2d_data_fmt	 format;	/* pixel format of image frame buffer */
+	g2d_pixel_seq	 pixel_seq;	/* pixel sequence of image frame buffer */
 } g2d_image;
 
-/* image struct */
-typedef struct {
-	int		 bbuff;
-	__u32		 color;
-	g2d_fmt_enh	 format;
-	__u32		 laddr[3];
-	__u32		 haddr[3];
-	__u32		 width;
-	__u32		 height;
-	__u32		 align[3];
-
-	g2d_rect	 clip_rect;
-
-	__u32		 gamut;
-	int		 bpremul;
-	__u8		 alpha;
-	g2d_alpha_mode_enh mode;
-	int		 fd;
-	__u32 use_phy_addr;
-} g2d_image_enh;
-
 /*
  * 0:Top to down, Left to right
  * 1:Top to down, Right to left
@@ -353,33 +194,21 @@ typedef struct {
 } g2d_fillrect;
 
 typedef struct {
-	g2d_image_enh dst_image_h;
-} g2d_fillrect_h;
-
-typedef struct {
-	g2d_blt_flags		flag;
-	g2d_image		src_image;
-	g2d_rect		src_rect;
+	g2d_blt_flags		 flag;
+	g2d_image			 src_image;
+	g2d_rect			 src_rect;
 
-	g2d_image		dst_image;
-	/* left top point coordinate x of dst rect */
-	__s32			dst_x;
-	/* left top point coordinate y of dst rect */
-	__s32			dst_y;
+	g2d_image			 dst_image;
+	__s32				 dst_x;		/* left top point coordinate x of dst rect */
+	__s32				 dst_y;		/* left top point coordinate y of dst rect */
 
-	__u32			color;		/* colorkey color */
-	__u32			alpha;		/* plane alpha value */
+	__u32				 color;		/* colorkey color */
+	__u32				 alpha;		/* plane alpha value */
 
 } g2d_blt;
 
 typedef struct {
-	g2d_blt_flags_h flag_h;
-	g2d_image_enh src_image_h;
-	g2d_image_enh dst_image_h;
-} g2d_blt_h;
-
-typedef struct {
-	g2d_blt_flags			 flag;
+	g2d_blt_flags		 flag;
 	g2d_image			 src_image;
 	g2d_rect			 src_rect;
 
@@ -393,33 +222,19 @@ typedef struct {
 } g2d_stretchblt;
 
 typedef struct {
-	g2d_rop3_cmd_flag back_flag;
-	g2d_rop3_cmd_flag fore_flag;
+	__u32		 flag;		/* ��դ������ */
+	g2d_image	 dst_image;
+	g2d_rect	 dst_rect;
 
-	g2d_image_enh dst_image_h;
-	g2d_image_enh src_image_h;
-	g2d_image_enh ptn_image_h;
-	g2d_image_enh mask_image_h;
+	g2d_image	 src_image;
+	__u32		 src_x;
+	__u32		 src_y;
 
-} g2d_maskblt;
+	g2d_image	 mask_image;
+	__u32		 mask_x;
+	__u32		 mask_y;
 
-/* Porter Duff BLD command*/
-typedef enum {
-	G2D_BLD_CLEAR = 0x00000001,
-	G2D_BLD_COPY = 0x00000002,
-	G2D_BLD_DST = 0x00000003,
-	G2D_BLD_SRCOVER = 0x00000004,
-	G2D_BLD_DSTOVER = 0x00000005,
-	G2D_BLD_SRCIN = 0x00000006,
-	G2D_BLD_DSTIN = 0x00000007,
-	G2D_BLD_SRCOUT = 0x00000008,
-	G2D_BLD_DSTOUT = 0x00000009,
-	G2D_BLD_SRCATOP = 0x0000000a,
-	G2D_BLD_DSTATOP = 0x0000000b,
-	G2D_BLD_XOR = 0x0000000c,
-	G2D_CK_SRC = 0x00010000,
-	G2D_CK_DST = 0x00020000,
-} g2d_bld_cmd_flag;
+} g2d_maskblt;
 
 typedef struct {
 	__u32		*pbuffer;
@@ -427,81 +242,26 @@ typedef struct {
 
 } g2d_palette;
 
-
+#endif /*__G2D_BSP_DRV_H*/
 
 typedef struct {
 	long	start;
 	long	end;
 } g2d_cache_range;
 
-/* CK PARA struct */
-typedef struct {
-	bool match_rule;
-/*	int match_rule; */
-	__u32 max_color;
-	__u32 min_color;
-} g2d_ck;
-
-typedef struct {
-	g2d_bld_cmd_flag bld_cmd;
-	g2d_image_enh dst_image_h;
-	g2d_image_enh src_image_h;
-	g2d_ck ck_para;
-} g2d_bld;			/* blending enhance */
-
-typedef enum {
-	OP_FILLRECT = 0x1,
-	OP_BITBLT = 0x2,
-	OP_BLEND = 0x4,
-	OP_MASK = 0x8,
-	OP_SPLIT_MEM = 0x10,
-} g2d_operation_flag;
-
-/**
- * mixer_para
- */
-struct mixer_para {
-	g2d_operation_flag op_flag;
-	g2d_blt_flags_h flag_h;
-	g2d_rop3_cmd_flag back_flag;
-	g2d_rop3_cmd_flag fore_flag;
-	g2d_bld_cmd_flag bld_cmd;
-	g2d_image_enh src_image_h;
-	g2d_image_enh dst_image_h;
-	g2d_image_enh ptn_image_h;
-	g2d_image_enh mask_image_h;
-	g2d_ck ck_para;
-};
-
-#define SUNXI_G2D_IOC_MAGIC 'G'
-#define SUNXI_G2D_IO(nr)          _IO(SUNXI_G2D_IOC_MAGIC, nr)
-#define SUNXI_G2D_IOR(nr, size)   _IOR(SUNXI_G2D_IOC_MAGIC, nr, size)
-#define SUNXI_G2D_IOW(nr, size)   _IOW(SUNXI_G2D_IOC_MAGIC, nr, size)
-#define SUNXI_G2D_IOWR(nr, size)  _IOWR(SUNXI_G2D_IOC_MAGIC, nr, size)
-
 typedef enum {
 	G2D_CMD_BITBLT			=	0x50,
 	G2D_CMD_FILLRECT		=	0x51,
 	G2D_CMD_STRETCHBLT		=	0x52,
 	G2D_CMD_PALETTE_TBL		=	0x53,
 	G2D_CMD_QUEUE			=	0x54,
-	G2D_CMD_BITBLT_H		=	0x55,
-	G2D_CMD_FILLRECT_H		=	0x56,
-	G2D_CMD_BLD_H			=	0x57,
-	G2D_CMD_MASK_H			=	0x58,
 
 	G2D_CMD_MEM_REQUEST		=	0x59,
 	G2D_CMD_MEM_RELEASE		=	0x5A,
 	G2D_CMD_MEM_GETADR		=	0x5B,
 	G2D_CMD_MEM_SELIDX		=	0x5C,
-	G2D_CMD_MEM_FLUSH_CACHE		=	0x5D,
-	G2D_CMD_INVERTED_ORDER		=	0x5E,
-	G2D_CMD_MIXER_TASK = 0x5F,
-	G2D_CMD_CREATE_TASK = SUNXI_G2D_IOW(0x1, struct mixer_para),
-	G2D_CMD_TASK_APPLY = SUNXI_G2D_IOW(0x2, struct mixer_para),
-	G2D_CMD_TASK_DESTROY = SUNXI_G2D_IOW(0x3, unsigned int),
-	G2D_CMD_TASK_GET_PARA = SUNXI_G2D_IOR(0x4, struct mixer_para),
-
+	G2D_CMD_MEM_FLUSH_CACHE	=	0x5D,
+	G2D_CMD_INVERTED_ORDER = 0x5E,
 } g2d_cmd;
 
 #endif	/* __G2D_DRIVER_H */
diff --git a/src/include/g2d_driver_enh.h b/src/include/g2d_driver_enh.h
index 5096a37..1fbd93d 100644
--- a/src/include/g2d_driver_enh.h
+++ b/src/include/g2d_driver_enh.h
@@ -20,6 +20,8 @@
 #define __G2D_DRIVER_H
 
 #include<stdbool.h>
+#include <linux/types.h>
+#include <linux/ioctl.h>
 
 /* data format */
 typedef enum {
@@ -306,6 +308,17 @@ typedef struct {
 	g2d_pixel_seq	pixel_seq;/* pixel sequence of image frame buffer */
 } g2d_image;
 
+typedef struct {
+	/* left point coordinate x of dst rect */
+	unsigned int x;
+	/* top point coordinate y of dst rect */
+	unsigned int y;
+} g2d_coor;
+
+enum color_range {
+	COLOR_RANGE_0_255 = 0,
+	COLOR_RANGE_16_255 = 1,
+};
 /* image struct */
 typedef struct {
 	int		 bbuff;
@@ -318,13 +331,15 @@ typedef struct {
 	__u32		 align[3];
 
 	g2d_rect	 clip_rect;
+	g2d_coor	 coor;
 
-	__u32		 gamut;
+	g2d_color_gmt    gamut;
 	int		 bpremul;
 	__u8		 alpha;
 	g2d_alpha_mode_enh mode;
 	int		 fd;
 	__u32 use_phy_addr;
+	enum color_range color_range;
 } g2d_image_enh;
 
 /*
@@ -376,6 +391,13 @@ typedef struct {
 	g2d_image_enh dst_image_h;
 } g2d_blt_h;
 
+typedef struct {
+	g2d_blt_h blt;
+	__u32	lbc_cmp_ratio;
+	bool	enc_is_lossy;
+	bool	dec_is_lossy;
+} g2d_lbc_rot;
+
 typedef struct {
 	g2d_blt_flags			 flag;
 	g2d_image			 src_image;
@@ -442,11 +464,40 @@ typedef struct {
 
 typedef struct {
 	g2d_bld_cmd_flag bld_cmd;
-	g2d_image_enh dst_image_h;
-	g2d_image_enh src_image_h;
+	g2d_image_enh dst_image;
+	g2d_image_enh src_image[4];/*now only ch0 and ch3*/
 	g2d_ck ck_para;
 } g2d_bld;			/* blending enhance */
 
+typedef enum {
+	OP_FILLRECT = 0x1,
+	OP_BITBLT = 0x2,
+	OP_BLEND = 0x4,
+	OP_MASK = 0x8,
+	OP_SPLIT_MEM = 0x10,
+} g2d_operation_flag;
+
+/**
+ * mixer_para
+ */
+struct mixer_para {
+	g2d_operation_flag op_flag;
+	g2d_blt_flags_h flag_h;
+	g2d_rop3_cmd_flag back_flag;
+	g2d_rop3_cmd_flag fore_flag;
+	g2d_bld_cmd_flag bld_cmd;
+	g2d_image_enh src_image_h;
+	g2d_image_enh dst_image_h;
+	g2d_image_enh ptn_image_h;
+	g2d_image_enh mask_image_h;
+	g2d_ck ck_para;
+};
+
+#define SUNXI_G2D_IOC_MAGIC 'G'
+#define SUNXI_G2D_IO(nr)          _IO(SUNXI_G2D_IOC_MAGIC, nr)
+#define SUNXI_G2D_IOR(nr, size)   _IOR(SUNXI_G2D_IOC_MAGIC, nr, size)
+#define SUNXI_G2D_IOW(nr, size)   _IOW(SUNXI_G2D_IOC_MAGIC, nr, size)
+#define SUNXI_G2D_IOWR(nr, size)  _IOWR(SUNXI_G2D_IOC_MAGIC, nr, size)
 typedef enum {
 	G2D_CMD_BITBLT			=	0x50,
 	G2D_CMD_FILLRECT		=	0x51,
@@ -464,29 +515,13 @@ typedef enum {
 	G2D_CMD_MEM_SELIDX		=	0x5C,
 	G2D_CMD_MEM_FLUSH_CACHE		=	0x5D,
 	G2D_CMD_INVERTED_ORDER		=	0x5E,
+	G2D_CMD_MIXER_TASK		=	0x5F,
+	G2D_CMD_LBC_ROT			=	0x60,
+	G2D_CMD_CREATE_TASK = SUNXI_G2D_IOW(0x1, struct mixer_para),
+	G2D_CMD_TASK_APPLY = SUNXI_G2D_IOW(0x2, struct mixer_para),
+	G2D_CMD_TASK_DESTROY = SUNXI_G2D_IOW(0x3, unsigned int),
+	G2D_CMD_TASK_GET_PARA = SUNXI_G2D_IOR(0x4, struct mixer_para),
 } g2d_cmd;
 
-typedef struct{
-    int g2d_fd;
-    g2d_blt_h info;
-    g2d_blt blit;
-    Uint32 src_base_addr;
-    Uint32 dst_base_addr;
-//    g2d_rect src_rect;
-//    g2d_rect dst_rect;
-    Uint32 src_full_width;
-    Uint32 src_full_height;
-    Uint32 src_start_x;
-    Uint32 src_start_y;
-    Uint32 src_work_width;
-    Uint32 src_work_height;
-    Uint32 dst_full_width;
-    Uint32 dst_full_height;
-    Uint32 dst_start_x;
-    Uint32 dst_start_y;
-    Uint32 dst_work_width;
-    Uint32 dst_work_height;
-}fb_g2d_params;
-
 #endif	/* __G2D_DRIVER_H */
 
diff --git a/src/newgal/fbcon/fbvideo.c b/src/newgal/fbcon/fbvideo.c
index 6010f63..71afd96 100644
--- a/src/newgal/fbcon/fbvideo.c
+++ b/src/newgal/fbcon/fbvideo.c
@@ -86,10 +86,6 @@ static void FB_FreeHWSurfaces(_THIS);
 static void FB_RequestHWSurface (_THIS, const REQ_HWSURFACE* request, REP_HWSURFACE* reply);
 static int FB_AllocHWSurface(_THIS, GAL_Surface *surface);
 static void FB_FreeHWSurface(_THIS, GAL_Surface *surface);
-#ifdef _MGIMAGE_G2D
-static void *FB_AllocIONBUF(_THIS, GAL_Surface *surface);
-static int FB_HWAccelBlit(_THIS, GAL_Surface *src, GAL_Rect *srcrect, GAL_Surface *dst, GAL_Rect *dstrect);
-#endif
 static void FB_WaitVBL(_THIS);
 static void FB_WaitIdle(_THIS);
 
@@ -106,9 +102,6 @@ static int FB_DoubleBufferEnable(_THIS, GAL_Surface *current, BOOL enable);
 static void FB_SavePalette(_THIS, struct fb_fix_screeninfo *finfo,
                                   struct fb_var_screeninfo *vinfo);
 static void FB_RestorePalette(_THIS);
-#ifdef _MGIMAGE_G2D
-#define FBIO_GET_PHY_ADDR 0x4633
-#endif
 /* FB driver bootstrap functions */
 static int FB_Available(void)
 {
@@ -123,17 +116,6 @@ static int FB_Available(void)
     if ( console >= 0 ) {
         close(console);
     }
-#ifdef _MGIMAGE_G2D
-	if((GAL_VieoIonFd = open("/dev/g2d", O_RDWR)) == -1){
-		printf("open g2d device fail!\n");
-		close(GAL_VieoIonFd);
-		return -1;
-	}
-	if(sunxi_ion_alloc_open() == -1){
-		printf("open /dev/ion error\n");
-		sunxi_ion_alloc_close();
-	}
-#endif
     return(console >= 0);
 }
 
@@ -193,10 +175,6 @@ static GAL_VideoDevice *FB_CreateDevice(int devindex)
     this->SetHWColorKey = NULL;
     this->SetHWAlpha = NULL;
     this->UpdateRects = NULL;
-#ifdef _MGIMAGE_G2D
-    this->AllocIONBUF = FB_AllocIONBUF;
-    this->HWAccelBlit = FB_HWAccelBlit;
-#endif
 #if 1
     this->LockHWSurface = FB_LockHWSurface;
     this->UnlockHWSurface = FB_UnlockHWSurface;
@@ -789,11 +767,7 @@ static GAL_Surface *FB_SetVideoMode(_THIS, GAL_Surface *current,
         default:
         break;
     }
-#ifdef _MGIMAGE_G2D
-        flip_phy_page = 0;
-        flip_addr_phy[0] = ioctl(console_fd, FBIO_GET_PHY_ADDR, NULL);
-        flip_addr_phy[1] = flip_addr_phy[0]+current->h*current->pitch;
-#endif
+
 	if (flags & GAL_OFFSETBUF) {
 		current->flags |= GAL_OFFSETBUF;
 		this->yOffsetBufferStatus = TRUE;
@@ -898,9 +872,6 @@ static int FB_InitHWSurfaces(_THIS, GAL_Surface *screen, char *base, int size)
         bucket->base = base;
         bucket->size = size;
         bucket->next = NULL;
-#ifdef _MGIMAGE_G2D
-	bucket->addr_phy = ioctl(console_fd, FBIO_GET_PHY_ADDR, NULL);
-#endif
     } else {
         bucket = NULL;
     }
@@ -911,9 +882,6 @@ static int FB_InitHWSurfaces(_THIS, GAL_Surface *screen, char *base, int size)
     surfaces.base = screen->pixels;
     surfaces.size = (unsigned int)((long)base - (long)surfaces.base);
     surfaces.next = bucket;
-#ifdef _MGIMAGE_G2D
-    surfaces.addr_phy = ioctl(console_fd, FBIO_GET_PHY_ADDR, NULL);
-#endif
     screen->hwdata = (void*)&surfaces;
     return(0);
 }
@@ -994,9 +962,6 @@ static void FB_RequestHWSurface (_THIS, const REQ_HWSURFACE* request, REP_HWSURF
             newbucket->prev = bucket;
             newbucket->used = 0;
             newbucket->base = bucket->base + size;
-#ifdef _MGIMAGE_G2D
-	    newbucket->addr_phy = bucket->addr_phy+size;
-#endif
 	    newbucket->size = extra;
             newbucket->next = bucket->next;
             if ( bucket->next ) {
@@ -1009,9 +974,6 @@ static void FB_RequestHWSurface (_THIS, const REQ_HWSURFACE* request, REP_HWSURF
         bucket->used = 1;
         bucket->size = size;
         bucket->dirty = 0;
-#ifdef _MGIMAGE_G2D
-	bucket->addr_phy = bucket->addr_phy+size+extra;
-#endif
 #ifdef FBCON_DEBUG
         fprintf(stderr, "NEWGAL>FBCON: Allocated %d bytes at %p\n", bucket->size, bucket->base);
 #endif
@@ -1132,76 +1094,7 @@ static void FB_FreeHWSurface(_THIS, GAL_Surface *surface)
     surface->pixels = NULL;
     surface->hwdata = NULL;
 }
-#ifdef _MGIMAGE_G2D
-static void *FB_AllocIONBUF (_THIS, GAL_Surface *surface)
-{
-	surface->hwdata = (struct private_hwdata *)surface;
-	surface->pixels = sunxi_ion_alloc_palloc(surface->h*surface->pitch);
-	((vidmem_bucket *)surface->hwdata)->addr_phy = sunxi_ion_alloc_vir2phy_cpu(surface->pixels);
-	return surface->pixels;
-}
-#endif
-#ifdef _MGIMAGE_G2D
-static int FB_HWAccelBlit(_THIS, GAL_Surface *src, GAL_Rect *srcrect, GAL_Surface *dst, GAL_Rect *dstrect)
-{
-	fb_g2d_params param;
 
-	if(dstrect->w == 0 || dstrect->h == 0){
-		return -1;
-	}
-	param.info.src_image_h.width = src->w;
-	param.info.src_image_h.height = src->h;
-
-	param.info.src_image_h.clip_rect.x = srcrect->x;
-	param.info.src_image_h.clip_rect.y = srcrect->y;
-	param.info.src_image_h.clip_rect.w = srcrect->w;
-	param.info.src_image_h.clip_rect.h = srcrect->h;
-
-	param.info.flag_h = 1024;
-	param.info.src_image_h.mode = 2;
-	param.info.src_image_h.alpha = 255;
-	param.info.src_image_h.use_phy_addr = 1;
-	param.info.src_image_h.format = G2D_FORMAT_ARGB8888;
-	param.info.src_image_h.laddr[0] = ((vidmem_bucket *)src->hwdata)->addr_phy;
-	param.info.src_image_h.laddr[1] = (unsigned int)0;
-	param.info.src_image_h.laddr[2] = (unsigned int)0;
-	param.info.src_image_h.haddr[0] = (unsigned int)0;
-	param.info.src_image_h.haddr[1] = (unsigned int)0;
-	param.info.src_image_h.haddr[2] = (unsigned int)0;
-	param.info.src_image_h.align[0] = 0;
-	param.info.src_image_h.align[1] = param.info.src_image_h.align[0];
-	param.info.src_image_h.align[2] = param.info.src_image_h.align[0];
-
-	param.info.dst_image_h.width = dst->w;
-	param.info.dst_image_h.height = dst->h;
-
-	param.info.dst_image_h.clip_rect.x = dstrect->x;
-	param.info.dst_image_h.clip_rect.y = dstrect->y;
-	param.info.dst_image_h.clip_rect.w = dstrect->w;
-	param.info.dst_image_h.clip_rect.h = dstrect->h;
-
-	param.info.flag_h = 1024;
-	param.info.dst_image_h.mode = 2;
-	param.info.dst_image_h.alpha = 255;
-	param.info.dst_image_h.use_phy_addr = 1;
-	param.info.dst_image_h.format = G2D_FORMAT_ARGB8888;
-	param.info.dst_image_h.laddr[0] = ((vidmem_bucket *)dst->hwdata)->addr_phy;
-	param.info.dst_image_h.laddr[1] = (unsigned int)0;
-	param.info.dst_image_h.laddr[2] = (unsigned int)0;
-	param.info.dst_image_h.haddr[0] = (unsigned int)0;
-	param.info.dst_image_h.haddr[1] = (unsigned int)0;
-	param.info.dst_image_h.haddr[2] = (unsigned int)0;
-	param.info.dst_image_h.align[0] = 0;
-	param.info.dst_image_h.align[1] = param.info.dst_image_h.align[0];
-	param.info.dst_image_h.align[2] = param.info.dst_image_h.align[0];
-
-	if(ioctl(GAL_VieoIonFd, G2D_CMD_BITBLT_H, (unsigned long)(&param.info)) < 0){
-		close(GAL_VieoIonFd);
-		return -1;
-	}
-	return 0;
-}
-#endif
 static void FB_WaitVBL(_THIS)
 {
 #ifdef FBIOWAITRETRACE /* Heheh, this didn't make it into the main kernel */
@@ -1324,65 +1217,7 @@ static int FB_DoubleBufferEnable(_THIS, GAL_Surface *current, BOOL enable)
 	}
 	return 0;
 }
-#ifdef _MGIMAGE_G2D
-int fb_g2dcopy(_THIS, GAL_Surface *src, GAL_Rect *rects)
-{
-	fb_g2d_params param;
-
-	param.info.src_image_h.width = src->w;
-        param.info.src_image_h.height = src->h;
-
-        param.info.src_image_h.clip_rect.x = rects->x;
-        param.info.src_image_h.clip_rect.y = rects->y;
-        param.info.src_image_h.clip_rect.w = rects->w;
-        param.info.src_image_h.clip_rect.h = rects->h;
-
-	param.info.flag_h = 1024;
-        param.info.src_image_h.mode = 2;
-        param.info.src_image_h.alpha = 255;
-	param.info.src_image_h.use_phy_addr = 1;
-	param.info.src_image_h.format = G2D_FORMAT_ARGB8888;
-        param.info.src_image_h.laddr[0] = flip_addr_phy[flip_phy_page];
-        param.info.src_image_h.laddr[1] = (unsigned int)0;
-        param.info.src_image_h.laddr[2] = (unsigned int)0;
-        param.info.src_image_h.haddr[0] = (unsigned int)0;
-        param.info.src_image_h.haddr[1] = (unsigned int)0;
-        param.info.src_image_h.haddr[2] = (unsigned int)0;
-        param.info.src_image_h.align[0] = 0;
-        param.info.src_image_h.align[1] = param.info.src_image_h.align[0];
-        param.info.src_image_h.align[2] = param.info.src_image_h.align[0];
-
-        param.info.dst_image_h.width = src->w;
-        param.info.dst_image_h.height = src->h;
-
-	param.info.dst_image_h.clip_rect.x = rects->x;
-        param.info.dst_image_h.clip_rect.y = rects->y;
-        param.info.dst_image_h.clip_rect.w = rects->w;
-        param.info.dst_image_h.clip_rect.h = rects->h;
-
-	param.info.flag_h = 1024;
-        param.info.dst_image_h.mode = 2;
-        param.info.dst_image_h.alpha = 255;
-	param.info.dst_image_h.use_phy_addr = 1;
-        param.info.dst_image_h.format = G2D_FORMAT_ARGB8888;
-        param.info.dst_image_h.laddr[0] = flip_addr_phy[!flip_phy_page];
-        param.info.dst_image_h.laddr[1] = (unsigned int)0;
-        param.info.dst_image_h.laddr[2] = (unsigned int)0;
-        param.info.dst_image_h.haddr[0] = (unsigned int)0;
-        param.info.dst_image_h.haddr[1] = (unsigned int)0;
-        param.info.dst_image_h.haddr[2] = (unsigned int)0;
-        param.info.dst_image_h.align[0] = 0;
-        param.info.dst_image_h.align[1] = param.info.dst_image_h.align[0];
-        param.info.dst_image_h.align[2] = param.info.dst_image_h.align[0];
-
-	if(ioctl(GAL_VieoIonFd, G2D_CMD_BITBLT_H, (unsigned long)(&param.info)) < 0){
-                printf("G2D_CMD_BITBLT_H fail\n");
-                close(GAL_VieoIonFd);
-                return -1;
-        }
-	return 0;
-}
-#endif
+
 static int FB_FlipHWSurface(_THIS, GAL_Surface *surface, GAL_Rect *rects,
 		BOOL enable)
 {
@@ -1463,12 +1298,8 @@ static int FB_FlipHWSurface(_THIS, GAL_Surface *surface, GAL_Rect *rects,
 
 	if (rects->x == 0 && rects->y == 0, rects->w == surface->w
 			&& rects->h == surface->h) {
-#ifdef _MGIMAGE_G2D
-		fb_g2dcopy(this, surface, rects);
-#else
 		GAL_memcpy(flip_address[!flip_page], flip_address[flip_page],
 				mapped_memlen / 2);
-#endif
 	} else {
 		GAL_BlitInfo info;
 
@@ -1494,10 +1325,6 @@ static int FB_FlipHWSurface(_THIS, GAL_Surface *surface, GAL_Rect *rects,
 
 		FB_BlitCopy(&info);
 	}
-#ifdef _MGIMAGE_G2D
-		flip_phy_page = !flip_phy_page;
-		((vidmem_bucket *)this->screen->hwdata)->addr_phy = flip_addr_phy[flip_phy_page];
-#endif
 		flip_page = !flip_page;
 		this->screen->pixels = flip_address[flip_page];
 
@@ -1667,11 +1494,6 @@ static void FB_VideoQuit(_THIS)
             memset(this->screen->pixels,0,this->screen->h*this->screen->pitch);
 #endif
         }
-#ifdef _MGIMAGE_G2D
-	close(GAL_VieoIonFd);
-	sunxi_ion_alloc_close();
-	GAL_VieoIonFd = 0;
-#endif
         /* This test fails when using the VGA16 shadow memory */
         if ( ((char *)this->screen->pixels >= mapped_mem) &&
              ((char *)this->screen->pixels < (mapped_mem+mapped_memlen)) ) {
diff --git a/src/newgal/fbcon/fbvideo.h b/src/newgal/fbcon/fbvideo.h
index 3d06884..d411673 100644
--- a/src/newgal/fbcon/fbvideo.h
+++ b/src/newgal/fbcon/fbvideo.h
@@ -41,10 +41,7 @@
 #include <pthread.h>
 
 #include "sysvideo.h"
-#ifdef _MGIMAGE_G2D
-#include "../../include/g2d_driver_enh.h"
-#include "../../include/g2d_driver.h"
-#endif
+
 /* Hidden "this" pointer for the video functions */
 #define _THIS    GAL_VideoDevice *this
 
@@ -60,11 +57,6 @@ typedef struct vidmem_bucket {
     char *base;
     unsigned int size;
     struct vidmem_bucket *next;
-#ifdef _MGIMAGE_G2D
-    int g2d_fd;
-    void *addr_phy;
-    int ion_fd;
-#endif
 } vidmem_bucket;
 
 /* Private display data */
@@ -95,13 +87,7 @@ struct GAL_PrivateVideoData {
     char *mapped_io;
     long mapped_iolen;
     int flip_page;
-#ifdef _MGIMAGE_G2D
-    int flip_phy_page;
-#endif
     char *flip_address[3];
-#ifdef _MGIMAGE_G2D
-    char *flip_addr_phy[2];
-#endif
     vidmem_bucket surfaces;
     int surfaces_memtotal;
     int surfaces_memleft;
@@ -111,12 +97,7 @@ struct GAL_PrivateVideoData {
     int need_sync;
     FB_mutex *hw_lock;
 };
-#ifdef _MGIMAGE_G2D
-struct private_hwdata{
-    int g2d_fd;
-    void *addr_phy;
-};
-#endif
+
 /* Old variable names */
 #define console_fd          (this->hidden->console_fd)
 #define current_vt          (this->hidden->current_vt)
@@ -136,10 +117,6 @@ struct private_hwdata{
 #define mapped_iolen        (this->hidden->mapped_iolen)
 #define flip_page           (this->hidden->flip_page)
 #define flip_address        (this->hidden->flip_address)
-#ifdef _MGIMAGE_G2D
-#define flip_phy_page       (this->hidden->flip_phy_page)
-#define flip_addr_phy       (this->hidden->flip_addr_phy)
-#endif
 #define surfaces            (this->hidden->surfaces)
 #define surfaces_memtotal   (this->hidden->surfaces_memtotal)
 #define surfaces_memleft    (this->hidden->surfaces_memleft)
-- 
2.29.0

